AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create an EC2 instance in a private subnet, VPC, and a Lambda function. Includes a Network ACL (NACL).

Parameters:
  ImageAMI:
    Type: String

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC

  # Private Subnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet

  # Security Group for EC2
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH and HTTP access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SecurityGroup

  # Network ACL for the private subnet
  PrivateNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateNACL

  # NACL Association with Subnet
  PrivateNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      NetworkAclId: !Ref PrivateNACL

  # Inbound NACL rules
  PrivateNACLInboundRules:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 100
      Protocol: 6  # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  PrivateNACLInboundRulesSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 110
      Protocol: 6  # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 22
        To: 22

  # Outbound NACL rules
  PrivateNACLOutboundRules:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 100
      Protocol: 6  # TCP
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      InstanceType: t2.micro
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds: 
        - !Ref SecurityGroup
      ImageId: !Ref ImageAMI
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          amazon-linux-extras install nginx1.12 -y
          systemctl start nginx
          systemctl enable nginx
      Tags:
        - Key: Name
          Value: EC2Instance

  # IAM Role for Lambda Function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: Allow
            Principal: 
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  # Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LambdaFunction
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          INSTANCE_IP: !GetAtt EC2Instance.PrivateIpAddress
      Code:
        ZipFile: |
          import requests
          import boto3
          import os

          def handler(event, context):
              ec2_private_ip = os.getenv('INSTANCE_IP')
              port = 80
              url = f'http://{ec2_private_ip}:{port}/'
              response = requests.get(url)
              return {
                  'statusCode': 200,
                  'body': f'Successfully connected to EC2 instance on port {port}. Response: {response.text}'
              }
      DependsOn:
      - EC2Instance

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC

  SubnetId:
    Description: Private Subnet ID
    Value: !Ref PrivateSubnet

  EC2InstanceId:
    Description: EC2 Instance ID
    Value: !Ref EC2Instance

  LambdaFunctionArn:
    Description: Lambda Function ARN
    Value: !GetAtt LambdaFunction.Arn
