AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  BucketNameSrc:
    Type: String
  BucketNameDest:
    Type: String

Resources:
  BucketSrc:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketNameSrc
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  BucketPolicySrc:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketSrc
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Deny
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref BucketSrc
                - /*
            Principal: '*'

  BucketDest:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketNameDest
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  BucketPolicyDest:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketDest
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref BucketDest
                - /*
            Principal: '*'

  LambdaRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: 
                  - !Sub 'arn:aws:s3:::${BucketSrc}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: 
                  - !Sub 'arn:aws:s3:::${BucketSrc}'
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: 
                  - !Sub 'arn:aws:s3:::${BucketDest}/*'


  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'copy-file-lambda-${AWS::StackName}-${AWS::Region}'
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.12
      Environment:
        Variables:
          SRC_BUCKET_NAME: !Ref BucketSrc
          DEST_BUCKET_NAME: !Ref BucketDest
          FILE_NAME: "wrong-index.txt"
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import time

          s3 = boto3.client('s3')

          def handler(event, context):
              time.sleep(4)
              source_bucket = os.getenv("SRC_BUCKET_NAME")
              source_key = os.getenv("FILE_NAME")
              destination_bucket = os.getenv("DEST_BUCKET_NAME")
              new_key = 'copied-' + source_key

              # Copy the object to the destination bucket with a new name
              copy_source = {'Bucket': source_bucket, 'Key': source_key}
              s3.copy_object(CopySource=copy_source, Bucket=destination_bucket, Key=new_key)
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('File copied successfully!')
              }

  S3PutObjectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt BucketDest.Arn

  S3GetObjectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt BucketSrc.Arn

Outputs:
  BucketSrcName:
    Description: "Source S3 Bucket Name"
    Value: !Ref BucketSrc

  BucketDestName:
    Description: "Destination S3 Bucket Name"
    Value: !Ref BucketDest

  LambdaFunctionName:
    Description: "Lambda Function Name"
    Value: !Ref LambdaFunction
