AWSTemplateFormatVersion: '2010-09-09'
Description: Template to create two VPCs, each with a private subnet, Lambda function, security groups, route tables, and NACLs.

Resources:

  # VPC 1
  VPC1:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: VPC1

  VPC1PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: VPC1PrivateSubnet

  # VPC 2
  VPC2:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.1.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: VPC2

  VPC2PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      CidrBlock: 10.1.1.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: VPC2PrivateSubnet

  # NACL for VPC 1
  NACL1:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC1

  NACL1InboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACL1
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  NACL1OutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACL1
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  # NACL for VPC 2
  NACL2:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC2

  NACL2InboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACL2
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  NACL2OutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACL2
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  # Route Table for VPC 1
  RouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1

  Route1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NatGateway1

  # Route Table for VPC 2
  RouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC2

  Route2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NatGateway2

  # Security Group for Lambda in VPC 1
  LambdaSG1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda Security Group for VPC 1
      VpcId: !Ref VPC1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Security Group for Lambda in VPC 2
  LambdaSG2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda Security Group for VPC 2
      VpcId: !Ref VPC2
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Lambda Function in VPC 1
  LambdaFunction1:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: VPC1LambdaFunction
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def handler(event, context):
              return "Hello from Lambda in VPC 1!"
      VpcConfig:
        SubnetIds: [!Ref VPC1PrivateSubnet]
        SecurityGroupIds: [!Ref LambdaSG1]
      Runtime: python3.11

  # Lambda Function in VPC 2
  LambdaFunction2:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: VPC2LambdaFunction
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def handler(event, context):
              return "Hello from Lambda in VPC 2!"
      VpcConfig:
        SubnetIds: [!Ref VPC2PrivateSubnet]
        SecurityGroupIds: [!Ref LambdaSG2]
      Runtime: python3.9

  # IAM Role for Lambda Execution
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  -
